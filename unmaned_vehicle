#include <Servo.h>
#include <NewPing.h>



unsigned int LeftMotorForward =4;
unsigned int LeftMotorBackward= 5;
unsigned int RightMotorForward= 6;
unsigned int RightMotorBackward= 7;
unsigned int trigPin= 8;
unsigned int echoPin =9;
unsigned int MaxDistance= 100;



Servo servo;
NewPing sonar(trigPin, echoPin, MaxDistance);



unsigned int duration;
unsigned int distance; 
unsigned int FrontDistance;
unsigned int LeftDistance;
unsigned int RightDistance;
unsigned int Time;
unsigned int CollisionCounter;


unsigned int abc;



char str[70];
char *test="$GPGGA";       
char logitude[10];
char latitude[10];
char logitude1[10]="12.33732";
char latitude1[10]="76.66833";
int i,j,k;
int temp;




void setup() {
  // put your setup code here, to run once:
Serial.begin(9600);
  Serial1.begin(9600);
  Serial2.begin(9600);
  pinMode(LeftMotorForward, OUTPUT);
  pinMode(LeftMotorBackward, OUTPUT);
  pinMode(RightMotorForward, OUTPUT);
  pinMode(RightMotorBackward, OUTPUT);
  servo.attach(10);
  delay(300);
  abc=0;

}

void loop() {
  // put your main code here, to run repeatedly:

while(1)
{
servo.write(90);
  servo.write(90);
  delay(350);
  scan();                                             //Go to the scan function
  FrontDistance = distance;                           //Set the variable FrontDistance to the value of the distance returned from the scan function
  Serial.println("Front distance = ");
  Serial.print(distance);
  if(FrontDistance > 40 || FrontDistance == 0)        //If there is nothing infront of the robot within 40cm or the distance value is 0 (which for the newping libary means no ping was returned) then...
  {
   moveForward();                                     //Go to the moveForward function
  } 
  else                                                //Else (if there is something infront of the robot within 40cm) then...
  {
    CollisionCounter = CollisionCounter + 1;
    moveStop();                                       //Go to the moveStop function
    navigate();
  }  


  

if(temp==1)
  {
    for(i=18;i<27;i++)          //extract latitude from string
    {
     latitude[j]=str[i];
     j++;
    }
    for(i=30;i<40;i++)          //extract longitude from string
    {
    logitude[k]=str[i];
     k++;
    }
    //send_sms();
    temp=0;
    i=0;
    j=0;
    k=0;
  }


  abc++;
  
  
  if(abc==50)
  {
    abc=0;
    moveStop();
    send_sms();
    //setup();
    }

}

}



void serialEvent2()
{
  while (Serial2.available())            //Serial incomming data from GPS 
  {
    char inChar = (char)Serial2.read(); 
    str[i]= inChar;                  //store incomming data from GPS to temparary string str[]
     i++;
     if (i < 7)                       
     {
      if(str[i-1] != test[i-1])         //check for right string
      {
        i=0; 
      }
     }
    if(i >=60)
    {
     temp=1;
    } 
  }
}



void send_sms()
{
  Serial.println("Sending SMS...");
  delay(1000);
Serial1.println("AT+CMGF=1");
   delay(1000);
   

   Serial1.println("AT+CMGS=\"+911234567890\"\r");
   delay(1000);
   Serial1.println("Current Vehicle Possition Is:");
   Serial1.println("Latitude:");
   Serial1.println(latitude1);
   Serial1.println("Logitude:");
   Serial1.println(logitude1);
   delay(1000);
   Serial1.println((char)26);
   delay(1000);
   Serial.println("SMS Sent.");
}



//////////////////////////////////////////////////////////////////////

void moveForward()                                    //This function tells the robot to go forward 
{
  Serial.println("");
  Serial.println("Moving forward");
  digitalWrite(LeftMotorBackward, LOW);
  //digitalWrite(LeftMotorForward, HIGH);
  analogWrite(LeftMotorForward,158);
  digitalWrite(RightMotorBackward, LOW);
  //digitalWrite(RightMotorForward, HIGH);
  analogWrite(RightMotorForward,158);
  delay(250);
}

//////////////////////////////////////////////////////////////////////

void moveBackward()                                  //This function tells the robot to move backward
{
  Serial.println("");
  Serial.println("Moving backward");
  digitalWrite(LeftMotorForward, LOW);
  //digitalWrite(LeftMotorBackward, HIGH);
  analogWrite(LeftMotorBackward,158);
  digitalWrite(RightMotorForward, LOW);
  //digitalWrite(RightMotorBackward, HIGH);
  analogWrite(RightMotorBackward,158);
  delay(250);
}

///////////////////////////////////////////////////////////////////////

void moveLeft()                                      //This function tells the robot to turn left
{
  Serial.println("");
  Serial.println("Moving left");
  digitalWrite(LeftMotorForward, LOW);
  //digitalWrite(LeftMotorBackward, HIGH);
  analogWrite(LeftMotorBackward,158);
  digitalWrite(RightMotorBackward, LOW);
  //digitalWrite(RightMotorForward, HIGH);
  analogWrite(RightMotorForward,158);
  delay(250);
  
}

///////////////////////////////////////////////////////////////////////

void moveRight()                                    //This function tells the robot to turn right
{
  Serial.println("");
  Serial.println("Moving right");
  digitalWrite(LeftMotorBackward, LOW);
  //digitalWrite(LeftMotorForward, HIGH);
  analogWrite(LeftMotorForward,158);
  digitalWrite(RightMotorForward, LOW);
  //digitalWrite(RightMotorBackward, HIGH);
  analogWrite(LeftMotorBackward,158);
  delay(250);
}

////////////////////////////////////////////////////////////////////////

void moveStop()                                     //This function tells the robot to stop moving
{
  Serial.println("");
  Serial.println("Stopping");
  digitalWrite(LeftMotorBackward, LOW);
  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(RightMotorForward, LOW);
  digitalWrite(RightMotorBackward, LOW);
  delay(250);
}

//////////////////////////////////////////////////////////////////////////

void scan()                                         //This function determines the distance things are away from the ultrasonic sensor
{
  Serial.println("");
  Serial.println("Scanning");
  Time = sonar.ping(); 
  distance = Time / US_ROUNDTRIP_CM;
  delay(450);
}

//////////////////////////////////////////////////////////////////////////

void navigate()
{
    Serial.println("There's an obstacle!");
    servo.write(180);                                 //Move the servo to the left (my little servos didn't like going to 180 so I played around with the value until it worked nicely)
    servo.write(180);
    delay(450);                                       //Wait half a second for the servo to get there
    scan();                                           //Go to the scan function
    LeftDistance = distance;                          //Set the variable LeftDistance to the distance on the left
    Serial.println("Left distance = ");
    Serial.print(distance);
    servo.write(0);                                   //Move the servo to the right
    servo.write(0);
    delay(550);                                       //Wait half a second for the servo to get there
    scan();                                           //Go to the scan function
    RightDistance = distance;                         //Set the variable RightDistance to the distance on the right
    Serial.println("Right distance = ");
    Serial.print(distance);
    servo.write(90);                                   //Move the servo to the right
    servo.write(90);
    delay(550);
    if(abs(RightDistance - LeftDistance) < 5)
    {
      moveBackward();                                  //Go to  the moveBackward function
      delay(350);                                      //Pause the program for 200 milliseconds to let the robot reverse
      moveRight();                                     //Go to the moveRight function
      delay(250);                                      //Pause the program for 200 milliseconds to let the robot turn right
    }
    else if(RightDistance < LeftDistance)                  //If the distance on the right is less than that on the left then...
    {
     moveLeft();                                      //Go to the moveLeft function
     delay(250);                                      //Pause the program for half a second to let the robot turn
    }
    else if(LeftDistance < RightDistance)             //Else if the distance on the left is less than that on the right then...
    {
     moveRight();                                     //Go to the moveRight function
     delay(250);                                      //Pause the program for half a second to let the robot turn
    }
}

