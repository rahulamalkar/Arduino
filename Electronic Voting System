//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Assumptions:
//1. The adhar number is of size 12.
//2. The Voter Id number is of size 12.
//3. we can store at max of 5 Adhar number and 5 Voter Id numbers.


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//includes
#include <LiquidCrystal.h>
#include <Keypad.h>
#include <Adafruit_Fingerprint.h>
#include <SoftwareSerial.h>
//#include "TimerOne.h"

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Arduino Reset.
void(* resetFunc) (void) = 0; 

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Software //Serial for when you dont have a hardware //Serial port
// pin #2 is IN from sensor (YELLOW wire)
// pin #3 is OUT from arduino  (BLUE wire)
// On Leonardo/Micro/Yun, use pins 8 & 9. On Mega, just grab a hardware //Serialport 
//Software//Serial my//Serial(2, 3);
//Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&Serial1);

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//keypad init.
const byte ROWS = 4; // Four rows
const byte COLS = 4; // Three columns
// Define the Keymap
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'#','0','*','D'}
};
// Connect keypad ROW0, ROW1, ROW2 and ROW3 to these Arduino pins.
byte rowPins[ROWS] = { 22, 24, 26, 28 };
// Connect keypad COL0, COL1 and COL2 to these Arduino pins.
byte colPins[COLS] = { 30, 32, 34, 36 };  

// Create the Keypad
Keypad kpd = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(43, 45, 47, 49, 51, 53); /// REGISTER SELECT PIN,ENABLE PIN,D4 PIN,D5 PIN, D6 PIN, D7 PIN


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//local flags
bool gWellComeDisplayFlag = false;
bool gAdharEnteryActive = false;
bool gVoterIdEnteryActive = false;
bool gAdharNumberSuccess = false;
bool gVoterIdNumberSuccess = false;
bool gVoted = false;

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//global varibles
#define gAdharNumberLength 12 //the adhar nmber size.
#define gMaxStoredAdharNum 5 //maximum stored adhar numbers.


#define gVoterIdNumberLength 12 //the adhar nmber size.
#define gMaxStoredVoterIdNum 5 //maximum stored adhar numbers.

#define gTimeOutDelay 20000 //time for calling the time out, it is in milli secs.

unsigned int gAdharNumPosition = 0; //input string postion index for adhar
unsigned int gVoterIdNumPosition = 0; //input string postion index for voter id
char gAdharNumber[gAdharNumberLength + 1] = ""; //variable to store the entered adhar number
char gVoterIdNumber[gVoterIdNumberLength + 1] = ""; //variable to store the entered voter id number
long gPreviousMillis = 0;        // will store last time LED was updated
unsigned int gAdharNumSuccessId = 0; //successfully authenticated adhar numbers id
unsigned int gVoterIdNumSuccessId = 0; //successfully authenticated voter id numbers id


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//pre loaded adhar card numbers.
char gStoredAdharNumbers[gMaxStoredAdharNum][gAdharNumberLength + 1] = {
  {'1','2','3','4','5','6','7','8','9','1','2','3','1'},
  {'2','2','3','4','5','6','7','8','9','1','2','3','2'},
  {'3','2','3','4','5','6','7','8','9','1','2','3','3'},
  {'4','2','3','4','5','6','7','8','9','1','2','3','4'},
  {'5','2','3','4','5','6','7','8','9','1','2','3','5'}
};


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//pre loaded Voter Id numbers.
char gStoredVoterIdNumbers[gMaxStoredVoterIdNum][gVoterIdNumberLength + 1] = {
  {'1','2','3','4','5','6','7','8','9','1','2','3','1'},
  {'2','2','3','4','5','6','7','8','9','1','2','3','2'},
  {'3','2','3','4','5','6','7','8','9','1','2','3','3'},
  {'4','2','3','4','5','6','7','8','9','1','2','3','4'},
  {'5','2','3','4','5','6','7','8','9','1','2','3','5'}
};


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//function declariations.
bool CheckAdharNumber();
bool CheckVoterIdNumber();
void DisplayInvalidAdharNumber();
void GetVoterIdNum();
void GetAdharNum();
void WellComeDisplay();
void GetFingurePrint();
void PutVote(uint8_t lPrintId);
void UpdateOnline();
uint8_t getFingerprintID(int flag);
void DisplayAdharVoterMissMatch();
uint8_t getFingerprintID1();

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Function Name: setup
//Input : NULL
//Return : NULL
//Description :
void setup()
{
  // set up the LCD's number of columns and rows:
  gAdharNumPosition = 0;
  gAdharNumber[0] = '\0';
  gAdharEnteryActive = false;
  gAdharNumberSuccess = false;
  gAdharNumSuccessId = 0;
  gVoterIdNumPosition = 0;
  gVoterIdNumber[0] = '\0';
  gVoterIdEnteryActive = false;
  gVoterIdNumberSuccess = false;
  gVoterIdNumSuccessId = 0;

  //Serial.begin(9600);
  Serial2.begin(9600);
  finger.begin(9600);
  
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1);
  }

  delay(100);
  lcd.begin(20, 4);
  
  //Timer1.initialize(1000000000);         // initialize timer1, and set a 5 second period
  lcd.clear();
  WellComeDisplay();
  //Serial.println("setup done!");
}
 
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Function Name: loop
//Input : NULL
//Return : NULL
//Description :
void loop()
{
  ////Serial.println("inside loop");
  if(true != gAdharNumberSuccess && gAdharNumSuccessId == 0) 
  {
    //Serial.println("if(true != gAdharNumberSuccess)");
    GetAdharNum();
  }
  else if(true != gVoterIdNumberSuccess && gVoterIdNumSuccessId == 0 && true == gAdharNumberSuccess && gAdharNumSuccessId != 0)
  {
    //Serial.println("else if(true != gVoterIdNumberSuccess && true == gAdharNumberSuccess)");
    GetVoterIdNum();
  }
  else if(true == gVoterIdNumberSuccess && gAdharNumSuccessId != 0 && true == gAdharNumberSuccess && gVoterIdNumSuccessId != 0)
  {
    //Serial.println("else if(true == gVoterIdNumberSuccess && true == gAdharNumberSuccess)");
    if(gAdharNumSuccessId == gVoterIdNumSuccessId)
    {
      GetFingurePrint();
    }
    else
    {
      DisplayAdharVoterMissMatch();
    }
  }
  else
  {
    WellComeDisplay();
  }
  //delay(50);
  ////Serial.print("gAdharEnteryActive : ");
  ////Serial.print(gAdharEnteryActive);
  ////Serial.print(" ");
  ////Serial.print("gVoterIdEnteryActive : ");
  ////Serial.println(gVoterIdEnteryActive);
  if(true == gAdharEnteryActive || true == gVoterIdEnteryActive)
  {
    //Serial.print(".");
    unsigned long currentMillis = millis();
 
    if((currentMillis - gPreviousMillis) > gTimeOutDelay)
    {
      //Serial.print(",");
    // save the last time you blinked the LED
      gPreviousMillis = currentMillis;
      TimeOut();
    }
  }
  ////Serial.println("left loop");
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Function Name: WellComeDisplay
//Input : NULL
//Return : NULL
//Description : It will display the wellcome screen related contents on
//              the screen
void WellComeDisplay()
{
  // ////Serial.println("inside welcome()");
  lcd.setCursor(0, 0);// set the cursor to column 0, line1
  lcd.print("     ELECTRONIC");//print name
  lcd.setCursor(0, 1); // set the cursor to column 0, line 2
  lcd.print("   VOTING SYSTEM ");//print name
  lcd.setCursor(0, 2); // set the cursor to column 0, line 3
  lcd.print("ENTER ADHAR NUMBER:");//print name
  lcd.setCursor(0, 3); // set the cursor to column 0, line 4
  lcd.noCursor();
  gWellComeDisplayFlag = true;
  // ////Serial.println("leaving welcome()");
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Function Name: TimeOut
//Input : NULL
//Return : NULL
//Description : this functio will be called when the user has started the
//              entery and if he delays for a time specified by gTimeOutDelay
void TimeOut()
{
  lcd.setCursor(0, 3); // set the cursor to column 0, line 4
  lcd.print("    TIME OUT!");//print name
  //Timer1.detachInterrupt();
  delay(1000);
  resetFunc();
  setup();
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Function Name: CheckAdharNumber
//Input : NULL
//Return : NULL
//Description : This function will be called when the entire adhar number
//              is entered by the user in the screen to check wether the
//              entered number matches with the number which is stored in
//              the gStoredAdharNumbers array defined globally.
bool CheckAdharNumber()
{
  ////Serial.println("inside CheckAdharNumber()");
  gAdharEnteryActive = false;
  bool lResult = false;
  int lRow = 0, lColumn = 0;
  for (lRow = 0;lRow <= gMaxStoredAdharNum; lRow++)
  {
    for (lColumn = 0; lColumn < gAdharNumberLength; lColumn++)
    {
      //Serial.print("Stored value is : ");
      //Serial.println(gStoredAdharNumbers[lRow][lColumn]);
      //Serial.print("Read value is : ");
      //Serial.println(gAdharNumber [lColumn]);
      if (gStoredAdharNumbers[lRow][lColumn] != gAdharNumber [lColumn])
      {
        //Serial.println("break;");
        break;
      }
    }
    if(lColumn == gAdharNumberLength)
    {
  gAdharNumPosition = 0;
  gAdharNumber[0] = '\0';
  lcd.setCursor(0, 3); // set the cursor to column 0, line 4
  lcd.print("                    ");//print name
      gAdharNumSuccessId = lRow + 1;
      //Serial.print("TBR---------------- the success adhar number is");
      //Serial.println(gAdharNumSuccessId);
      return true;
    }
  }
/*
  gAdharNumPosition = 0;
  gAdharNumber[0] = '\0';
  lcd.setCursor(0, 3); // set the cursor to column 0, line 4
  lcd.print("                    ");//print name

  if(true == lResult)
  {
    //Serial.println("return true;");
    return true;
  }
  else
  {
    //Serial.println("return false;");
    return false;
  }
  */
  return false;
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Function Name: CheckVoterIdNumber
//Input : NULL
//Return : NULL
//Description : This function will be called when the entire VoterId number
//              is entered by the user in the screen to check wether the
//              entered number matches with the number which is stored in
//              the gStoredVoterIdNumbers array defined globally.
bool CheckVoterIdNumber()
{
  //Serial.println("inside CheckAdharNumber()");
  gVoterIdEnteryActive = false;
  bool lResult = false;
  int lRow = 0, lColumn = 0;
  for (lRow = 0;lRow <= gMaxStoredVoterIdNum; lRow++)
  {
    for (lColumn = 0; lColumn < gVoterIdNumberLength; lColumn++)
    {
      //Serial.print("Stored value is : ");
      //Serial.println(gStoredVoterIdNumbers[lRow][lColumn]);
      //Serial.print("Read value is : ");
      //Serial.println(gVoterIdNumber [lColumn]);
      if (gStoredVoterIdNumbers[lRow][lColumn] != gVoterIdNumber [lColumn])
      {
        //Serial.println("break;");
        break;
      }
    }
    if(lColumn == gVoterIdNumberLength)
    {
      gVoterIdNumPosition = 0;
      gVoterIdNumber[0] = '\0';
      lcd.setCursor(0, 3); // set the cursor to column 0, line 4
  lcd.print("                    ");//print name
      gVoterIdNumSuccessId = lRow + 1;
      //Serial.print("TBR---------------- the success voterid number is");
      //Serial.println(gVoterIdNumSuccessId);
      return true;
    }
  }
/*
  gVoterIdNumPosition = 0;
  gVoterIdNumber[0] = '\0';
  lcd.setCursor(0, 3); // set the cursor to column 0, line 4
  lcd.print("                    ");//print name
  
  if(true == lResult)
  {
    Serial.println("return true;");
    return true;
  }
  else
  {
    Serial.println("return false;");
    return false;
  }*/
  return false;
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Function Name: DisplayInvalidAdharNumber
//Input : NULL
//Return : NULL
//Description : This function will be called when the entered adhar number
//              is invalid or it does't matches with the stored
//              gStoredAdharNumbers array.
void DisplayInvalidAdharNumber()
{
  //Serial.println("inside DisplayInvalidAdharNumber()");
  lcd.setCursor(0, 3); // set the cursor to column 0, line 4
  lcd.print("INVALID ADHAR");//print name
  delay(5000);
  lcd.setCursor(0, 3); // set the cursor to column 0, line 4
  lcd.print("                               ");//print name
  //WellComeDisplay();
  resetFunc();
  setup();
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Function Name: DisplayInvalidVoterIdNumber
//Input : NULL
//Return : NULL
//Description : This function will be called when the entered VoterId number
//            is invalid or it does't matches with the stored
//              gStoredVoterIdNumbers array.
void DisplayInvalidVoterIdNumber()
{
  //Serial.println("inside DisplayInvalidVoterIdNumber()");
  lcd.setCursor(0, 3); // set the cursor to column 0, line 4
  lcd.print("INVALID VoterId");//print name
  delay(5000);
  lcd.setCursor(0, 3); // set the cursor to column 0, line 4
  lcd.print("                               ");//print name
  //WellComeDisplay();
  resetFunc();
  setup();
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Function Name: DisplayAdharVoterMissMatch
//Input : NULL
//Return : NULL
//Description : This function will be called when the entered adhar number
//              is invalid or it does't matches with the stored
//              gStoredAdharNumbers array.
void DisplayAdharVoterMissMatch()
{
  //Serial.println("inside DisplayInvalidAdharNumber()");
  lcd.clear();
  lcd.setCursor(0, 1); // set the cursor to column 0, line 4
  lcd.print("VoterId & Adahar");//print name
  lcd.setCursor(0, 2); // set the cursor to column 0, line 4
  lcd.print("MISSMATCH!!");//print name
  delay(5000);
  //WellComeDisplay();
  resetFunc();
  setup();
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Function Name: GetVoterIdNum
//Input : NULL
//Return : NULL
//Description : This function will get the VoterId number from the user
//              and store it in the global string variable gVoterIdNumber.
void GetVoterIdNum()
{
  WellComeDisplay();
  lcd.setCursor(0, 2); // set the cursor to column 0, line 3
  lcd.print("ENTER VoteId NUMBER:");//print name
  //lcd.setCursor(0, 3); // set the cursor to column 0, line 4
  //lcd.print("                    ");//print name
  lcd.setCursor(0, 3); // set the cursor to column 0, line 4
  //Serial.println("inside GetAdharNum()");
  char key;
// set the cursor to column 0, line 1
if (gWellComeDisplayFlag == true)
  {
    key = kpd.getKey();
    if(key != NO_KEY)
    {
    //Serial.print("The read key is : ");
    //Serial.println(key);
    if(key != 'A' && key != 'B' && key != 'D' && key != '#' && key != '*' )
    {
      //Serial.println("inside if(key != 'A' && key != 'B' && key != 'D' && key != '#' && key != '*' )");
      //Timer1.detachInterrupt();
      //delay(200);
      //Timer1.attachInterrupt(TimeOut);  // attaches callback() as a timer overflow interrupt
      if(key == 'C')
      {
        //Serial.println("inside if(key == 'C')");
        gVoterIdNumPosition -= 1;
        gVoterIdNumber[gVoterIdNumPosition] = '\0';
        for(int i=gVoterIdNumPosition; i > 0; i--)
        {
          lcd.setCursor(i, 3); // set the cursor to column 0, line 4
          lcd.print(" ");//print name
        }
      }
      else
      {
        //Serial.println("inside else of if(key == 'C')");
        lcd.setCursor(gVoterIdNumPosition, 3); // set the cursor to column 0, line 4
        //Serial.print("Voter Id number position is : ");
        //Serial.println(gVoterIdNumPosition);
        gVoterIdNumber[gVoterIdNumPosition] = key;
        //Serial.print("so the VoterId number is : ");
        //Serial.println(gVoterIdNumber);
        lcd.print(key);
        gVoterIdNumPosition++;
        if(gVoterIdNumPosition == gVoterIdNumberLength)
        {
          //Serial.println("inside if(gVoterIdNumPosition == gVoterIdNumberLength)");
          if(true != CheckVoterIdNumber())
          {
            //Serial.println("inside if(true != CheckVoterIdNumber())");
            DisplayInvalidVoterIdNumber();
          }
          else
          {
            //Serial.println("inside else of if(true != CheckVoterIdNumber())");
            //Timer1.detachInterrupt();
            gPreviousMillis = 0;
            gVoterIdNumberSuccess = true;
          }
        }
      }
      if (gVoterIdNumPosition > 0)
    {
    gVoterIdEnteryActive = true;
    }
    }
    }
  }
  //Serial.println("left GetAdharNum()");
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Function Name: GetAdharNum
//Input : NULL
//Return : NULL
//Description : This function will get the Adhar number from the user
//              and store it in the global string variable gAdharNumber.
void GetAdharNum()
{
  //Serial.println("inside GetAdharNum()");
  char key;
// set the cursor to column 0, line 1
if (gWellComeDisplayFlag == true)
  {
    key = kpd.getKey();
    if(key != NO_KEY)
    {
    //Serial.print("The read key is : ");
    //Serial.println(key);
    if(key != 'A' && key != 'B' && key != 'D' && key != '#' && key != '*' )
    {
      //Serial.println("inside if(key != 'A' && key != 'B' && key != 'D' && key != '#' && key != '*' )");
      //Timer1.detachInterrupt();
      //delay(200);
      //Timer1.attachInterrupt(TimeOut);  // attaches callback() as a timer overflow interrupt
      if(key == 'C')
      {
        //Serial.println("inside if(key == 'C')");
        gAdharNumPosition -= 1;
        gAdharNumber[gAdharNumPosition] = '\0';
        for(int i=gAdharNumPosition; i > 0; i--)
        {
          lcd.setCursor(i, 3); // set the cursor to column 0, line 4
          lcd.print(" ");//print name
        }
      }
      else
      {
        //Serial.println("inside else of if(key == 'C')");
        lcd.setCursor(gAdharNumPosition, 3); // set the cursor to column 0, line 4
        //Serial.print("adhar number position is : ");
        //Serial.println(gAdharNumPosition);
        gAdharNumber[gAdharNumPosition] = key;
        //Serial.print("so the adhar number is : ");
        //Serial.println(gAdharNumber);
        lcd.print(key);
        gAdharNumPosition++;
        if(gAdharNumPosition == gAdharNumberLength)
        {
          //Serial.println("inside if(gAdharNumPosition == gAdharNumberLength)");
          if(true != CheckAdharNumber())
          {
            //Serial.println("inside if(true != CheckAdharNumber())");
            DisplayInvalidAdharNumber();
          }
          else
          {
            //Serial.println("inside else of if(true != CheckAdharNumber())");
            //Timer1.detachInterrupt();
            gPreviousMillis = 0;
            gAdharNumberSuccess = true;
          }
        }
      }
    if (gAdharNumPosition > 0)
    {
    gAdharEnteryActive = true;
    }
    }
   }
  }
  //Serial.println("left GetAdharNum()");
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Function Name: GetFingurePrint
//Input : NULL
//Return : NULL
//Description :
void GetFingurePrint()
{
  uint8_t lPrintId = 0;
  
  lcd.clear();
  lcd.setCursor(0, 0);// set the cursor to column 0, line1
  lcd.print("Pleas place Fingure:");//print name

  lPrintId = getFingerprintID(1);

//lPrintId = lPrintId + 1;

  /*lcd.clear();
  lcd.print("gAdharNum:");
  lcd.print(gAdharNumSuccessId);
  lcd.setCursor(0,2);
  lcd.print("lPrintId:");
  lcd.print(lPrintId);
  delay(3000);
*/


  if(lPrintId == gAdharNumSuccessId)
  {
    PutVote(lPrintId);
  }
  else
  {
    lcd.clear();
    lcd.print("not a match!");
    delay(4000);
    resetFunc();
  }

}

void PutVote(uint8_t lPrintId)
{
  //uint8_t lPrintId = 0;
  char key;
  long int lNum = 0;
  gVoted = false;
  lcd.clear();
  lcd.setCursor(0, 0);// set the cursor to column 0, line1
  lcd.print("PARTY1-1    PARTY2-2");//print name
  lcd.setCursor(0, 1); // set the cursor to column 0, line 2
  lcd.print("PARTY2-3    PARTY3-4");//print name
  lcd.setCursor(0, 2); // set the cursor to column 0, line 3
  lcd.print("PARTY3-5    PARTY3-6");//print name
  lcd.setCursor(0, 3); // set the cursor to column 0, line 4
  lcd.print("Enter NO.:");//print name
  //while(lPrintId == getFingerprintID(0))
  while(lPrintId == getFingerprintID1())
  {
    key = kpd.getKey();
    if(key != NO_KEY)
    {
      if(key != 'A' && key != 'B' && key != 'D' && key != 'C' && key != '*' && key != '#' && key != '7' && key != '8' && key != '9')
      {
        lcd.print(key);//print name
        gVoted = true;
        delay(1500);
        break;
      }
    }
    //delay(1);
    lNum++;
    if(lNum >= 50000)
    {
    lcd.setCursor(0, 0);// set the cursor to column 0, line1
    lcd.print("No Vote Given.");//print name
    lcd.setCursor(0, 1);// set the cursor to column 0, line1
    lcd.print("EXITING...");//print name
    delay(2000);
    resetFunc();
      break;
    }
  }
  lcd.clear();
  if(true != gVoted)
  {
    lcd.setCursor(0, 0);// set the cursor to column 0, line1
    lcd.print("FINGURE REMOVED!.");//print name
    lcd.setCursor(0, 1);// set the cursor to column 0, line1
    lcd.print("VOTE IS INVALID!!");//print name
    lcd.setCursor(0, 2);// set the cursor to column 0, line1
    lcd.print("EXITING...");//print name
    delay(2000);
    resetFunc();
  }
  else
  {
    lcd.setCursor(0, 0);// set the cursor to column 0, line1
    lcd.print("Voted to : ");//print name
    lcd.print(key);//print name
    lcd.setCursor(0, 1);// set the cursor to column 0, line1
    lcd.print("THANKS FOR VOTING.");//print name
    delay(2000);
    UpdateOnline(key);
  }
}

void UpdateOnline(char vote)
{
  lcd.clear();
  lcd.setCursor(0, 0);// set the cursor to column 0, line1
  lcd.print("Uploading Vote...");//print name
  delay(2000);
  //here comes your code

//Serial2.begin(9600);
 
  Serial2.println("AT+CSQ"); // Signal quality check

  delay(100);

  //Serial.println("inside GPS>");
 
  Serial2.println("AT+CGSN");
  delay(100);
  
  Serial2.println("AT+CGATT?"); //Attach or Detach from GPRS Support
  delay(100);
 
  Serial2.println("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"");//setting the SAPBR, the connection type is using gprs
  delay(1000);
 
  Serial2.println("AT+SAPBR=3,1,\"APN\",\"TATA.DOCOMO.INTERNET\"");//setting the APN, Access point name string
  delay(4000);
  
  Serial2.println("AT+SAPBR=1,1");//setting the SAPBR
  delay(2000);
 
  Serial2.println("AT+HTTPINIT"); //init the HTTP request
 
  delay(2000); 
 
  Serial2.print("AT+HTTPPARA=\"URL\",\"bri8school.in/demo/gpstracker/gps2/index.php/Gps/createGpsLocationFromDevice?imei=");
  Serial2.print(vote);
  Serial2.print("&gps=");
  Serial2.print(vote);
  Serial2.print(" ");// setting the httppara, the second parameter is the website you want to access
  Serial2.print(vote);
  Serial2.println("\"");
  delay(1000);
 
  Serial2.println("AT+HTTPACTION=0");//submit the request 
  delay(10000);//the delay is very important, the delay time is base on the return from the website, if the return datas are very large, the time required longer.
  //while(!SIM900.available());
 
  Serial2.println("AT+HTTPREAD");// read the data from the website you access
  delay(300);
 //changeLed();
  Serial2.println("");
  delay(100);
  
  lcd.setCursor(0, 1);// set the cursor to column 0, line1
  lcd.print("DONE!");//print name
  delay(2000);
  resetFunc();
}

uint8_t getFingerprintID(int flag)
{
  uint8_t p = -1;
  int i = 0;
  if(1 == flag){lcd.setCursor(0, 1);}
  while (p != FINGERPRINT_OK) 
  {
  p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      if (1 == flag){
      lcd.setCursor(0, 1);
      lcd.print("                    ");
      lcd.setCursor(0, 1);
      lcd.print("Image taken");
      delay(1000);
      }
      break;
    case FINGERPRINT_NOFINGER:
      if(1 == flag){
      lcd.print(".");
      delay(100);
      i++;
      if(i == 20)
      {
        lcd.setCursor(0, 1);
        lcd.print("                    ");
        lcd.setCursor(0, 1);
        i=0;
      }
      }
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      /*if(1 == flag){
      lcd.setCursor(0, 1);
      lcd.print("                    ");
      lcd.setCursor(0, 1);
      lcd.print("Communication error");
      delay(2000);
      resetFunc();
      }*/
      break;
    case FINGERPRINT_IMAGEFAIL:
      /*if (1 == flag)
      {
      lcd.setCursor(0, 1);
      lcd.print("                    ");
      lcd.setCursor(0, 1);
      lcd.print("Imaging error");
      delay(2000);
      resetFunc();
      }*/
      break;
    default:
      /*if(1 == flag){
      lcd.setCursor(0, 1);
      lcd.print("                    ");
      lcd.setCursor(0, 1);
      lcd.print("Unknown error");
      delay(2000);
      resetFunc();
      }*/
      break;
  }
  }

  // OK success!

  i=0;
  if (1 == flag){lcd.setCursor(0, 2);}

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
    if (1 == flag){
      lcd.print("Image converted");
      delay(800);
  }
      break;
    case FINGERPRINT_IMAGEMESS:
    /*if (1 == flag){
      lcd.print("Image too messy");
      delay(2000);
}*/
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
   /* if (1 == flag){
      lcd.print("Communication error");
      delay(2000);
      }*/
      break;
    case FINGERPRINT_FEATUREFAIL:
    /*if (1 == flag){
      lcd.print("Could not find fingerprint features");
      delay(2000);
      }*/
      break;
    case FINGERPRINT_INVALIDIMAGE:
    /*if (1 == flag){
      lcd.print("Could not find fingerprint features");
      delay(2000);
      }*/
      break;
    default:
    /*if (1 == flag){
      lcd.print("Unknown error");
      delay(2000);
      }*/
      break;
  }

  if (1 == flag){lcd.clear();}
  
  
  // OK converted!
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
    if (1 == flag){
    lcd.print("Found a print match!");
    lcd.setCursor(0,1);
    }} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      if (1 == flag){
    lcd.print("Communication error");
    //return p;
      }} else if (p == FINGERPRINT_NOTFOUND) {
        if (1 == flag){
    lcd.print("Did't find a match");}
    return 0;
    //return p;
  } else {
    if (1 == flag){
    lcd.print("Unknown error");}
    //return p;
  }   
  if (1 == flag){
delay(1000);
  //lcd.setCursor(0,2);
  // found a match!
  //lcd.print("Found ID #"); lcd.print(finger.fingerID); 
  //lcd.setCursor(0,3);
  //lcd.print("with confidence:"); lcd.print(finger.confidence); 
  //delay(3000);
  }
  return finger.fingerID;
}


uint8_t getFingerprintID1()
{
  uint8_t p = -1;
  p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      break;
    case FINGERPRINT_NOFINGER:
    case FINGERPRINT_PACKETRECIEVEERR:
    case FINGERPRINT_IMAGEFAIL:
    default:
      return 0;
  }

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      break;
    case FINGERPRINT_IMAGEMESS:
    case FINGERPRINT_PACKETRECIEVEERR:
    case FINGERPRINT_FEATUREFAIL:
    case FINGERPRINT_INVALIDIMAGE:
    default:
      return 0;
  }
  
  // OK converted!
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) 
  {
    return finger.fingerID;;
  } 
else if (p == FINGERPRINT_NOTFOUND) 
{
    return 0;
} else {
    return 0;
  }   
}
